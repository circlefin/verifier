/// <reference types="node" />
/**
 * @class
 * BitBuffer
 *
 * A class representing a bit buffer
 */
export declare class BitBuffer {
    private buffer;
    /**
     * @constructor
     * Build a new Bit Buffer
     *
     * @param lengthOrBuffer the length of the buffer in bits, or an existing
     * buffer to use
     */
    constructor(lengthOrBuffer?: number | Buffer | BitBuffer);
    /**
     * Build a new BitBuffer from a compressed bit string
     */
    static fromBitstring(input: string): BitBuffer;
    /**
     * Built a new BitBuffer from an index array
     */
    static fromIndexArray(input: number[], minLength?: number): BitBuffer;
    /**
     * The length of the bit buffer in bits.
     */
    get length(): number;
    /**
     *
     * @param offset
     * @param value
     * @returns
     */
    write(offset: number, value: number): BitBuffer;
    /**
     *
     * @param offset
     * @returns
     *
     * @throws RangeError if the offset is out of bounds
     */
    get(offset: number): number;
    /**
     * Set a bit to `1` at a given offset.
     *
     * @param offset the location to flip the bit
     * @returns a a copy of this BitBuffer with the bit set
     */
    set(offset: number): BitBuffer;
    /**
     * Set a bit to `0` at a given offset.
     *
     * @param offset the location to flip the bit
     * @returns a a copy of this BitBuffer with the bit unset
     */
    unset(offset: number): BitBuffer;
    /**
     * Test a bit at a given offset. Returns `true` if the bit is set, `false`
     * otherwise
     *
     * @param offset the location to test
     * @returns whether or not the bit is set at the given offset.
     */
    test(offset: number): boolean;
    /**
     * Generates a compressed bit string from an array of index values
     *
     * @returns a compressed string of bits representing the input array
     */
    toBitstring(): string;
    /**
     * Generates an array of indices from the buffer
     *
     * @returns an array of indices
     */
    toIndexArray(): number[];
}
