import * as ed25519 from '@transmute/did-key-ed25519';
import * as secp256k1 from '@transmute/did-key-secp256k1';
import * as x25519 from '@transmute/did-key-x25519';
import * as bls12381 from '@transmute/did-key-bls12381';
import * as web from '@transmute/did-key-web-crypto';
export { ed25519, x25519, secp256k1, bls12381, web };
export declare const typeMap: {
    ed25519: typeof ed25519;
    Ed25519: typeof ed25519;
    x25519: typeof x25519;
    X25519: typeof x25519;
    secp256k1: typeof secp256k1;
    bls12381: typeof bls12381;
    secp256r1: typeof web;
    'P-256': typeof web;
    secp384r1: typeof web;
    'P-384': typeof web;
    secp521r1: typeof web;
    'P-521': typeof web;
};
export declare const startsWithMap: {
    'did:key:z6Mk': typeof ed25519;
    'did:key:z6LS': typeof x25519;
    'did:key:zQ3s': typeof secp256k1;
    'did:key:z5Tc': typeof bls12381;
    'did:key:zUC7': typeof bls12381;
    'did:key:zDna': typeof web;
    'did:key:z82L': typeof web;
    'did:key:z2J9': typeof web;
};
export declare type curveName_ed25519 = 'ed25519';
export declare type curveName_secp256k1 = 'secp256k1';
export declare type curveName_secp256r1 = 'secp256r1';
export declare type curveName_secp384r1 = 'secp384r1';
export declare type curveName_secp521r1 = 'secp521r1';
export interface ResolutionOptions {
    accept: 'application/did+json' | 'application/did+ld+json';
    enableEncryptionKeyDerivation?: boolean;
}
export declare type GenerateKeyType = curveName_ed25519 | curveName_secp256k1 | curveName_secp256r1 | curveName_secp384r1 | curveName_secp521r1;
export interface GenerateOptions {
}
interface KeyCommonProps {
    id: string;
    type: string;
    controller: string;
}
interface JwkPairCommonProps {
    publicKeyJwk: any;
    privateKeyJwk: any;
}
interface LdPairCommonProps {
    publicKeyBase58: string;
    privateKeyBase58: string;
}
interface JwkKeyPair extends KeyCommonProps, JwkPairCommonProps {
}
interface LdKeyPair extends KeyCommonProps, LdPairCommonProps {
}
declare type DidKey = JwkKeyPair | LdKeyPair;
declare type DidDocument = {
    id: string;
    verificationMethod: any[];
};
declare type DidResolution = {
    didDocument: DidDocument;
};
declare type DidGeneration = {
    didDocument: DidDocument;
    keys: DidKey[];
};
declare type DidJwkGeneration = {
    didDocument: DidDocument;
    keys: JwkKeyPair[];
};
export declare const noSupportForSeed: string[];
export declare const getOptionsForType: (type: string) => {
    kty: string;
    crvOrSize: string;
};
export declare const generate: (type: string, generateOptions: GenerateOptions, resolutionOptions: ResolutionOptions) => Promise<DidGeneration>;
export declare const convert: (keys: DidKey[], resolutionOptions: {
    accept: 'application/did+json' | 'application/did+ld+json';
    enableEncryptionKeyDerivation?: boolean;
}) => Promise<DidGeneration>;
export declare const resolve: (did: string, resolutionOptions?: {
    accept: 'application/did+json' | 'application/did+ld+json';
    enableEncryptionKeyDerivation?: boolean;
}) => Promise<DidResolution>;
export declare const jwk: {
    generate: (options: any) => Promise<DidJwkGeneration>;
    resolve: (did: string) => Promise<DidResolution>;
};
export declare const key: {
    generate: (options: any) => Promise<DidGeneration>;
    resolve: (did: string, resolutionOptions?: {
        accept: 'application/did+json' | 'application/did+ld+json';
        enableEncryptionKeyDerivation?: boolean;
    }) => Promise<DidResolution>;
};
